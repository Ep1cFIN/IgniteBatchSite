
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."app_permission" AS ENUM (
    'users.create',
    'dashboard.access'
);

ALTER TYPE "public"."app_permission" OWNER TO "postgres";

CREATE TYPE "public"."app_role" AS ENUM (
    'ignite',
    'startup',
    'admin',
    'coach'
);

ALTER TYPE "public"."app_role" OWNER TO "postgres";

CREATE TYPE "public"."coach_type" AS ENUM (
    'Founder',
    'Operator',
    'Investor',
    'Other'
);

ALTER TYPE "public"."coach_type" OWNER TO "postgres";

COMMENT ON TYPE "public"."coach_type" IS 'What type of coach is this one? Founder, Operator, Investor, Other?';

CREATE TYPE "public"."user_role" AS ENUM (
    'alumni',
    'batch-member',
    'coach',
    'director',
    'admin'
);

ALTER TYPE "public"."user_role" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."custom_access_token_hook"("event" "jsonb") RETURNS "jsonb"
    LANGUAGE "plpgsql" STABLE
    AS $$
  declare
    claims jsonb;
    user_role public.app_role;
  begin
    -- Check if the user is marked as admin in the profiles table
    select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
    else
      claims := jsonb_set(claims, '{user_role}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
    return event;
  end;
$$;

ALTER FUNCTION "public"."custom_access_token_hook"("event" "jsonb") OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
begin
  insert into public.profiles (id, email, name, avatar_url)
  values (
    new.id,
    new.email,
    jsonb_extract_path_text(new.raw_user_meta_data, 'full_name'),
    jsonb_extract_path_text(new.raw_user_meta_data, 'avatar_url')
  );
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."favorite_deals" (
    "id" "uuid" NOT NULL,
    "deal_id" integer NOT NULL
);

ALTER TABLE "public"."favorite_deals" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."favorite_mentors" (
    "id" "uuid" NOT NULL,
    "mentor_id" integer NOT NULL
);

ALTER TABLE "public"."favorite_mentors" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."mentors" (
    "mentor_id" bigint NOT NULL,
    "full_name" "text",
    "contact_details" "text",
    "notes" "text",
    "coach_type_primary" "public"."coach_type",
    "coach_type_secondary" "public"."coach_type"
);

ALTER TABLE "public"."mentors" OWNER TO "postgres";

COMMENT ON TABLE "public"."mentors" IS 'Table of the available mentors during Ignite';

ALTER TABLE "public"."mentors" ALTER COLUMN "mentor_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."mentors_mentor_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "avatar_url" "text" DEFAULT 'https://ui-avatars.com/api/?name=John+Doe'::"text",
    "name" "text",
    "email" "text",
    "team_id" integer
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

COMMENT ON TABLE "public"."profiles" IS 'Profile data for each user.';

COMMENT ON COLUMN "public"."profiles"."id" IS 'References the internal Supabase Auth user.';

COMMENT ON COLUMN "public"."profiles"."avatar_url" IS 'url pointng to the avatar associated with the URL';

COMMENT ON COLUMN "public"."profiles"."name" IS 'Users full name';

COMMENT ON COLUMN "public"."profiles"."email" IS 'users email';

CREATE TABLE IF NOT EXISTS "public"."role_permissions" (
    "id" bigint NOT NULL,
    "role" "public"."app_role" NOT NULL,
    "permission" "public"."app_permission" NOT NULL
);

ALTER TABLE "public"."role_permissions" OWNER TO "postgres";

COMMENT ON TABLE "public"."role_permissions" IS 'Application permissions for each role.';

ALTER TABLE "public"."role_permissions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."role_permissions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."startup_deals" (
    "deal_id" bigint NOT NULL,
    "provider" "text",
    "deal" "text",
    "how_to_claim" "text",
    "Details" "text"
);

ALTER TABLE "public"."startup_deals" OWNER TO "postgres";

ALTER TABLE "public"."startup_deals" ALTER COLUMN "deal_id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."startup_deals_deal_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."teams" (
    "team_id" bigint NOT NULL,
    "details" "text",
    "logo_url" "text",
    "team_name" "text" NOT NULL,
    CONSTRAINT "teams_team_name_check" CHECK (("length"("team_name") < 50))
);

ALTER TABLE "public"."teams" OWNER TO "postgres";

COMMENT ON COLUMN "public"."teams"."team_name" IS 'name of the team';

ALTER TABLE "public"."teams" ALTER COLUMN "team_id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."teams_team_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "role" "public"."app_role" NOT NULL
);

ALTER TABLE "public"."user_roles" OWNER TO "postgres";

COMMENT ON TABLE "public"."user_roles" IS 'Application roles for each user.';

ALTER TABLE "public"."user_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."favorite_deals"
    ADD CONSTRAINT "favorite_deals_pkey" PRIMARY KEY ("id", "deal_id");

ALTER TABLE ONLY "public"."favorite_mentors"
    ADD CONSTRAINT "favorite_mentors_pkey" PRIMARY KEY ("id", "mentor_id");

ALTER TABLE ONLY "public"."mentors"
    ADD CONSTRAINT "mentors_pkey" PRIMARY KEY ("mentor_id");

ALTER TABLE ONLY "public"."role_permissions"
    ADD CONSTRAINT "role_permissions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."role_permissions"
    ADD CONSTRAINT "role_permissions_role_permission_key" UNIQUE ("role", "permission");

ALTER TABLE ONLY "public"."startup_deals"
    ADD CONSTRAINT "startup_deals_pkey" PRIMARY KEY ("deal_id");

ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_pkey" PRIMARY KEY ("team_id");

ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_team_name_key" UNIQUE ("team_name");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_role_key" UNIQUE ("user_id", "role");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."favorite_deals"
    ADD CONSTRAINT "favorite_deals_deal_id_fkey" FOREIGN KEY ("deal_id") REFERENCES "public"."startup_deals"("deal_id");

ALTER TABLE ONLY "public"."favorite_deals"
    ADD CONSTRAINT "favorite_deals_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."favorite_mentors"
    ADD CONSTRAINT "favorite_mentors_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."favorite_mentors"
    ADD CONSTRAINT "favorite_mentors_mentor_id_fkey" FOREIGN KEY ("mentor_id") REFERENCES "public"."mentors"("mentor_id");

ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "users_team_id_fkey" FOREIGN KEY ("team_id") REFERENCES "public"."teams"("team_id");

CREATE POLICY "Admins can alter add and delete startup deals" ON "public"."startup_deals" USING ((( SELECT "auth"."uid"() AS "uid") IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"public"."app_role"))));

CREATE POLICY "Allow auth admin to read user roles" ON "public"."user_roles" FOR SELECT TO "supabase_auth_admin" USING (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."startup_deals" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."teams" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));

CREATE POLICY "Team members can change their team" ON "public"."teams" USING ((( SELECT "teams"."team_id") IN ( SELECT "profiles"."team_id"
   FROM "public"."profiles"
  WHERE ("auth"."uid"() = "profiles"."id"))));

ALTER TABLE "public"."favorite_deals" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."favorite_mentors" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."mentors" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."role_permissions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."startup_deals" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."teams" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_roles" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
GRANT USAGE ON SCHEMA "public" TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "service_role";
GRANT ALL ON FUNCTION "public"."custom_access_token_hook"("event" "jsonb") TO "supabase_auth_admin";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."favorite_deals" TO "anon";
GRANT ALL ON TABLE "public"."favorite_deals" TO "authenticated";
GRANT ALL ON TABLE "public"."favorite_deals" TO "service_role";

GRANT ALL ON TABLE "public"."favorite_mentors" TO "anon";
GRANT ALL ON TABLE "public"."favorite_mentors" TO "authenticated";
GRANT ALL ON TABLE "public"."favorite_mentors" TO "service_role";

GRANT ALL ON TABLE "public"."mentors" TO "anon";
GRANT ALL ON TABLE "public"."mentors" TO "authenticated";
GRANT ALL ON TABLE "public"."mentors" TO "service_role";

GRANT ALL ON SEQUENCE "public"."mentors_mentor_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."mentors_mentor_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."mentors_mentor_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."role_permissions" TO "anon";
GRANT ALL ON TABLE "public"."role_permissions" TO "authenticated";
GRANT ALL ON TABLE "public"."role_permissions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."role_permissions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."role_permissions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."role_permissions_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."startup_deals" TO "anon";
GRANT ALL ON TABLE "public"."startup_deals" TO "authenticated";
GRANT ALL ON TABLE "public"."startup_deals" TO "service_role";

GRANT ALL ON SEQUENCE "public"."startup_deals_deal_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."startup_deals_deal_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."startup_deals_deal_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."teams" TO "anon";
GRANT ALL ON TABLE "public"."teams" TO "authenticated";
GRANT ALL ON TABLE "public"."teams" TO "service_role";

GRANT ALL ON SEQUENCE "public"."teams_team_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."teams_team_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."teams_team_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_roles" TO "service_role";
GRANT ALL ON TABLE "public"."user_roles" TO "supabase_auth_admin";

GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_roles_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
